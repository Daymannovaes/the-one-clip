#!/usr/bin/env node

import { exec } from 'child_process';
import { program } from 'commander';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Import the subcommand functions from their files
import { cutCommand } from '../commands/cut.js';
import { trackCommand } from '../commands/track.js';
import { extractAudioCommand } from '../commands/extract-audio.js';
import { safelyTranscriptCommand } from '../commands/transcript.js';
import { compressCommand } from '../commands/compress.js';
import { removeTrackCommand } from '../commands/remove-track.js';
import { compressBatchCommand } from '../commands/compress-batch.js';

function getOutputFile(inputFile, opts, ext = null) {
  if (opts.output) return opts.output;
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const inputExt = ext || inputFile.split('.').pop();
  return `${inputFile.slice(0, -inputExt.length-1)}_${timestamp}.${inputExt}`;
}

// ---------------------
// Cut
// ---------------------
program
  .command('cut <inputFile>')
  .description('Cut a portion of a video.')
  .option('--from, --start <time>', 'Start time, e.g. 00:01:02')
  .option('--to, --end <time>', 'End time, e.g. 00:02:30')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    cutCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// ---------------------
// Track
// ---------------------
program
  .command('track <inputFile>')
  .description('Choose a specific audio track from a video.')
  .requiredOption('--track <trackNumber>', 'Track number (1-based)')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    trackCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// ---------------------
// Extract Audio
// ---------------------
program
  .command('extract-audio <inputFile>')
  .description('Extract audio from a video.')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    extractAudioCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts, 'wav'),
    });
  });

// ---------------------
// Transcript
// ---------------------
program
  .command('transcript <inputFile>')
  .description('Generate SRT subtitles from video or audio.')
  .option('-o, --output <outputFile>', 'Output file')
  .option('-w, --whisperPath <whisperPath>', 'Whisper path (default: ~/workspace/whisper.cpp)')
  .option('-m, --ggmlModelPath <ggmlModelPath>', 'Ggml model path (default: $GGML_AI_MODELS_PATH/ggml-model-whisper-small.bin)')
  .action((inputFile, opts) => {
    safelyTranscriptCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts, 'srt'),
    });
  });

// ---------------------
// Compress
// ---------------------
program
  .command('compress <inputFile>')
  .description('Compress video to a small but reasonable size')
  .option('-o, --output <outputFile>', 'Output file')
  .option('--verygood', 'Use very gdoo quality result. If false, the quality is good but not VERY good')
  .option('--speed <speed>', 'Specify the speed of compression. Default is fast. "Slow" yields 2x smaller result. Options: fast, slow')
  .action((inputFile, opts) => {
    compressCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// ---------------------
// Compress Batch
// ---------------------
program
    .command('compress-batch <files...>')
    .description('Compress multiple files and rename originals')
    .action((files) => {
        compressBatchCommand(files);
    });

// ---------------------
// Open Me
// ---------------------
program
  .command('open-me')
  .description('Open this project in cursor using cursor CLI.')
  .action(() => {
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = dirname(__filename);

    return console.log(`cursor ${__dirname}`);

    exec(`cursor open ${__dirname}`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error opening project: ${error.message}`);
        return;
      }
      if (stderr) {
        console.error(`stderr: ${stderr}`);
        return;
      }
      console.log(`stdout: ${stdout}`);
    });
  });

// ---------------------
// Remove Track
// ---------------------
program
  .command('remove-track <inputFile>')
  .description('Remove a specific audio track from a video.')
  .requiredOption('--track <trackNumber>', 'Track number (1-based)')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    removeTrackCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// Parse arguments
program.parse(process.argv);
