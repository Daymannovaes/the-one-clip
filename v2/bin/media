#!/usr/bin/env node

import { program } from 'commander';

// Import the subcommand functions from their files
import { cutCommand } from '../commands/cut.js';
import { trackCommand } from '../commands/track.js';
import { extractAudioCommand } from '../commands/extract-audio.js';
import { generateSrtCommand } from '../commands/generate-srt.js';

function getOutputFile(inputFile, opts, ext = null) {
  if (opts.output) return opts.output;
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const inputExt = ext || inputFile.split('.').pop();
  return `${inputFile.slice(0, -inputExt.length-1)}_${timestamp}.${inputExt}`;
}

// ---------------------
// Cut
// ---------------------
program
  .command('cut <inputFile>')
  .description('Cut a portion of a video.')
  .option('--from, --start <time>', 'Start time, e.g. 00:01:02')
  .option('--to, --end <time>', 'End time, e.g. 00:02:30')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    cutCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// ---------------------
// Track
// ---------------------
program
  .command('track <inputFile>')
  .description('Choose a specific audio track from a video.')
  .requiredOption('--track <trackNumber>', 'Track number (1-based)')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    trackCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// ---------------------
// Extract Audio
// ---------------------
program
  .command('extract-audio <inputFile>')
  .description('Extract audio from a video.')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    extractAudioCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts, 'wav'),
    });
  });

// ---------------------
// Generate SRT
// ---------------------
program
  .command('srt <inputFile>')
  .description('Generate SRT subtitles from video or audio.')
  .option('-o, --output <outputFile>', 'Output file')
  .action((inputFile, opts) => {
    generateSrtCommand(inputFile, {
      ...opts,
      output: getOutputFile(inputFile, opts),
    });
  });

// Parse arguments
program.parse(process.argv);
